<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/06/12/%E8%BD%A9%E8%BE%95%E6%9D%AF/"/>
    <url>/2025/06/12/%E8%BD%A9%E8%BE%95%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="1、DIladila（轩辕杯）"><a href="#1、DIladila（轩辕杯）" class="headerlink" title="1、DIladila（轩辕杯）"></a>1、DIladila（轩辕杯）</h2><p>题目</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749696846250-c83b7fdd-27dc-4020-8136-b3f2dbfe34eb.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rol</span>(<span class="hljs-params">val, r_bits, max_bits=<span class="hljs-number">16</span></span>):<br>    <span class="hljs-keyword">return</span> ((val &lt;&lt; r_bits) &amp; (<span class="hljs-number">2</span>**max_bits - <span class="hljs-number">1</span>)) | (val &gt;&gt; (max_bits - r_bits))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror</span>(<span class="hljs-params">val, r_bits, max_bits=<span class="hljs-number">16</span></span>):<br>    <span class="hljs-keyword">return</span> (val &gt;&gt; r_bits) | ((val &lt;&lt; (max_bits - r_bits)) &amp; (<span class="hljs-number">2</span>**max_bits - <span class="hljs-number">1</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">speck_round</span>(<span class="hljs-params">x, y, k</span>):<br>    x = (ror(x, <span class="hljs-number">7</span>) + y) &amp; <span class="hljs-number">0xFFFF</span><br>    x ^= k<br>    y = rol(y, <span class="hljs-number">2</span>) ^ x<br>    <span class="hljs-keyword">return</span> x, y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_block</span>(<span class="hljs-params">x, y, keys</span>):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> keys:<br>        x, y = speck_round(x, y, k)<br>    <span class="hljs-keyword">return</span> x, y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_blocks</span>(<span class="hljs-params">s</span>):<br>    b = s.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(b) % <span class="hljs-number">4</span> != <span class="hljs-number">0</span>:<br>        b += <span class="hljs-string">b&#x27;\x00&#x27;</span> * (<span class="hljs-number">4</span> - <span class="hljs-built_in">len</span>(b) % <span class="hljs-number">4</span>)<br>    blocks = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(b), <span class="hljs-number">4</span>):<br>        x = <span class="hljs-built_in">int</span>.from_bytes(b[i:i+<span class="hljs-number">2</span>], <span class="hljs-string">&#x27;little&#x27;</span>)<br>        y = <span class="hljs-built_in">int</span>.from_bytes(b[i+<span class="hljs-number">2</span>:i+<span class="hljs-number">4</span>], <span class="hljs-string">&#x27;little&#x27;</span>)<br>        blocks.append((x, y))<br>    <span class="hljs-keyword">return</span> blocks<br><br><span class="hljs-comment"># 这里写明文变量时用占位符，实际加密时请自行替换</span><br>plaintext = <span class="hljs-string">&quot;***********&quot;</span><br><br>keys = [<span class="hljs-number">0x1234</span>, <span class="hljs-number">0x5678</span>, <span class="hljs-number">0x9abc</span>, <span class="hljs-number">0xdef0</span>]<br><br><span class="hljs-comment"># 组织分组</span><br>blocks = str_to_blocks(plaintext)<br><br>ciphertext = []<br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> blocks:<br>    cx, cy = encrypt_block(x, y, keys)<br>    ciphertext.append((cx, cy))<br><br><span class="hljs-comment"># 打印密文，供题目发布用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加密后的密文:&quot;</span>)<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> ciphertext:<br>    <span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><p>没啥说的把逆函数写出来，这里就理解代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rol</span>(<span class="hljs-params">val, r_bits, max_bits=<span class="hljs-number">16</span></span>):<br>    <span class="hljs-keyword">return</span> ((val &lt;&lt; r_bits) &amp; (<span class="hljs-number">2</span> ** max_bits - <span class="hljs-number">1</span>)) | (val &gt;&gt; (max_bits - r_bits))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ror</span>(<span class="hljs-params">val, r_bits, max_bits=<span class="hljs-number">16</span></span>):<br>    <span class="hljs-keyword">return</span> (val &gt;&gt; r_bits) | ((val &lt;&lt; (max_bits - r_bits)) &amp; (<span class="hljs-number">2</span> ** max_bits - <span class="hljs-number">1</span>))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">speck_round</span>(<span class="hljs-params">x, y, k</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;正向轮函数&quot;&quot;&quot;</span><br>    x = (ror(x, <span class="hljs-number">7</span>) + y) &amp; <span class="hljs-number">0xFFFF</span><br>    x ^= k<br>    y = rol(y, <span class="hljs-number">2</span>) ^ x<br>    <span class="hljs-keyword">return</span> x, y<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">speck_round_inverse</span>(<span class="hljs-params">x, y, k</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;逆向轮函数 - 解密用&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 逆向 y = rol(y, 2) ^ x</span><br>    y = y ^ x<br>    y = ror(y, <span class="hljs-number">2</span>)  <span class="hljs-comment"># 逆向循环左移</span><br><br>    <span class="hljs-comment"># 逆向 x = (ror(x, 7) + y) ^ k</span><br>    x = x ^ k<br>    <span class="hljs-comment"># 逆向 (ror(x, 7) + y)</span><br>    x = (x - y) &amp; <span class="hljs-number">0xFFFF</span><br>    x = rol(x, <span class="hljs-number">7</span>)  <span class="hljs-comment"># 逆向循环右移</span><br><br>    <span class="hljs-keyword">return</span> x, y<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_block</span>(<span class="hljs-params">cx, cy, keys</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;解密一个数据块&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 解密时使用逆序的子密钥</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(keys):<br>        cx, cy = speck_round_inverse(cx, cy, k)<br>    <span class="hljs-keyword">return</span> cx, cy<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">blocks_to_str</span>(<span class="hljs-params">blocks</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;将解密后的块转换回字符串&quot;&quot;&quot;</span><br>    bytes_list = []<br>    <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> blocks:<br>        <span class="hljs-comment"># 小端字节序转换回bytes</span><br>        bytes_list.append(x.to_bytes(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;little&#x27;</span>))<br>        bytes_list.append(y.to_bytes(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;little&#x27;</span>))<br>    <span class="hljs-comment"># 合并所有字节并解码为字符串</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;&#x27;</span>.join(bytes_list).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).rstrip(<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><br><br><span class="hljs-comment"># 题目中提供的密文</span><br>ciphertext = [<br>    (<span class="hljs-number">57912</span>, <span class="hljs-number">19067</span>),<br>    (<span class="hljs-number">38342</span>, <span class="hljs-number">34089</span>),<br>    (<span class="hljs-number">16842</span>, <span class="hljs-number">41652</span>),<br>    (<span class="hljs-number">30292</span>, <span class="hljs-number">50979</span>),<br>    (<span class="hljs-number">9137</span>, <span class="hljs-number">57458</span>),<br>    (<span class="hljs-number">29822</span>, <span class="hljs-number">64285</span>),<br>    (<span class="hljs-number">33379</span>, <span class="hljs-number">14140</span>),<br>    (<span class="hljs-number">16514</span>, <span class="hljs-number">4653</span>)<br>]<br><br><span class="hljs-comment"># 使用的子密钥（从加密代码中获取）</span><br>keys = [<span class="hljs-number">0x1234</span>, <span class="hljs-number">0x5678</span>, <span class="hljs-number">0x9abc</span>, <span class="hljs-number">0xdef0</span>]<br><br><span class="hljs-comment"># 解密过程</span><br>decrypted_blocks = []<br><span class="hljs-keyword">for</span> cx, cy <span class="hljs-keyword">in</span> ciphertext:<br>    dx, dy = decrypt_block(cx, cy, keys)<br>    decrypted_blocks.append((dx, dy))<br><br><span class="hljs-comment"># 转换回字符串</span><br>plaintext = blocks_to_str(decrypted_blocks)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的明文:&quot;</span>)<br><span class="hljs-built_in">print</span>(plaintext)<br></code></pre></td></tr></table></figure><h2 id="2、babyrsa（轩辕杯）"><a href="#2、babyrsa（轩辕杯）" class="headerlink" title="2、babyrsa（轩辕杯）"></a>2、babyrsa（轩辕杯）</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br>flag = <span class="hljs-string">b&quot;flag&#123;****************************&#125;&quot;</span><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">256</span>)<br>q = getPrime(<span class="hljs-number">256</span>)<br>n = p*q<br>d = getPrime(<span class="hljs-number">130</span>)<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e = invert(d, phi)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># print(f&#x27;e = &#123;e&#125;&#x27;)</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">bits</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        p = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> p.bit_length() &lt; bits:<br>            p *= choice(sieve_base)<br>        <span class="hljs-keyword">if</span> isPrime(p - <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> p - <span class="hljs-number">1</span><br><br><br>p1 = gen(<span class="hljs-number">256</span>)<br>q1 = gen(<span class="hljs-number">256</span>)<br>n1 = p1 * q1<br>c1 = p1 + e<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n1 = <span class="hljs-subst">&#123;n1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c1 = <span class="hljs-subst">&#123;c1&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">n = 10037257627154486608196774801095855162090578704439233219876490744017222686494761706171113312036056644757212254824459536550416291797454693336043852190135363</span><br><span class="hljs-string">c = 6723803125309437675713195914771839852631361554645954138639198200804046718848872479140347495288135138109762940384847808522874831433140182790750890982139835</span><br><span class="hljs-string">n1 = 151767047787614712083974720416865469041528766980347881592164779139223941980832935534609228636599644744364450753148219193621511377088383418096756216139022880709</span><br><span class="hljs-string">c1 = 6701513605196718137208327145211106525052740242222174201768345944717813148931922063338128366155730924516887607710111701686062781667128443135522927486682574</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>看代码发现p1和q1的生成方式符合攻击条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> primefac <span class="hljs-keyword">import</span> williams_pp1<br><br>n = <span class="hljs-number">151767047787614712083974720416865469041528766980347881592164779139223941980832935534609228636599644744364450753148219193621511377088383418096756216139022880709</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 使用Williams&#x27; p+1算法分解n</span><br>    p = williams_pp1(n)<br>    q = n // p<br><br>    <span class="hljs-comment"># 验证分解结果</span><br>    <span class="hljs-keyword">if</span> p * q == n:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;成功找到素因子:&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;q = <span class="hljs-subst">&#123;q&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;分解失败：p * q = <span class="hljs-subst">&#123;p * q&#125;</span>，不等于原始n&quot;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;分解过程中出错: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;可能需要调整Williams&#x27; p+1算法的参数或尝试其他分解方法&quot;</span>)<br></code></pre></td></tr></table></figure><p>现在就是已知n,c,e</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment">############################################</span><br><span class="hljs-comment"># Config</span><br><span class="hljs-comment">##########################################</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Setting debug to true will display more informations</span><br><span class="hljs-string">about the lattice, the bounds, the vectors...</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>debug = <span class="hljs-literal">True</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Setting strict to true will stop the algorithm (and</span><br><span class="hljs-string">return (-1, -1)) if we don&#x27;t have a correct</span><br><span class="hljs-string">upperbound on the determinant. Note that this</span><br><span class="hljs-string">doesn&#x27;t necesseraly mean that no solutions</span><br><span class="hljs-string">will be found since the theoretical upperbound is</span><br><span class="hljs-string">usualy far away from actual results. That is why</span><br><span class="hljs-string">you should probably use `strict = False`</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>strict = <span class="hljs-literal">False</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">This is experimental, but has provided remarkable results</span><br><span class="hljs-string">so far. It tries to reduce the lattice as much as it can</span><br><span class="hljs-string">while keeping its efficiency. I see no reason not to use</span><br><span class="hljs-string">this option, but if things don&#x27;t work, you should try</span><br><span class="hljs-string">disabling it</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>helpful_only = <span class="hljs-literal">True</span><br>dimension_min = <span class="hljs-number">7</span> <span class="hljs-comment"># stop removing if lattice reaches that dimension</span><br><br><span class="hljs-comment">############################################</span><br><span class="hljs-comment"># Functions</span><br><span class="hljs-comment">##########################################</span><br><br><span class="hljs-comment"># display stats on helpful vectors</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">helpful_vectors</span>(<span class="hljs-params">BB, modulus</span>):<br>    nothelpful = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        <span class="hljs-keyword">if</span> BB[ii,ii] &gt;= modulus:<br>            nothelpful += <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span>(nothelpful, <span class="hljs-string">&quot;/&quot;</span>, BB.dimensions()[<span class="hljs-number">0</span>], <span class="hljs-string">&quot; vectors are not helpful&quot;</span>)<br><br><span class="hljs-comment"># display matrix picture with 0 and X</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrix_overview</span>(<span class="hljs-params">BB, bound</span>):<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">0</span>]):<br>        a = (<span class="hljs-string">&#x27;%02d &#x27;</span> % ii)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(BB.dimensions()[<span class="hljs-number">1</span>]):<br>            a += <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">if</span> BB[ii,jj] == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;X&#x27;</span><br>            <span class="hljs-keyword">if</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">60</span>:<br>                a += <span class="hljs-string">&#x27; &#x27;</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            a += <span class="hljs-string">&#x27;~&#x27;</span><br>        <span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment"># tries to remove unhelpful vectors</span><br><span class="hljs-comment"># we start at current = n-1 (last vector)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_unhelpful</span>(<span class="hljs-params">BB, monomials, bound, current</span>):<br>    <span class="hljs-comment"># end of our recursive function</span><br>    <span class="hljs-keyword">if</span> current == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> BB.dimensions()[<span class="hljs-number">0</span>] &lt;= dimension_min:<br>        <span class="hljs-keyword">return</span> BB<br><br>    <span class="hljs-comment"># we start by checking from the end</span><br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(current, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># if it is unhelpful:</span><br>        <span class="hljs-keyword">if</span> BB[ii, ii] &gt;= bound:<br>            affected_vectors = <span class="hljs-number">0</span><br>            affected_vector_index = <span class="hljs-number">0</span><br>            <span class="hljs-comment"># let&#x27;s check if it affects other vectors</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ii + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                <span class="hljs-comment"># if another vector is affected:</span><br>                <span class="hljs-comment"># we increase the count</span><br>                <span class="hljs-keyword">if</span> BB[jj, ii] != <span class="hljs-number">0</span>:<br>                    affected_vectors += <span class="hljs-number">1</span><br>                    affected_vector_index = jj<br><br>            <span class="hljs-comment"># level:0</span><br>            <span class="hljs-comment"># if no other vectors end up affected</span><br>            <span class="hljs-comment"># we remove it</span><br>            <span class="hljs-keyword">if</span> affected_vectors == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;* removing unhelpful vector&quot;</span>, ii)<br>                BB = BB.delete_columns([ii])<br>                BB = BB.delete_rows([ii])<br>                monomials.pop(ii)<br>                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> BB<br><br>            <span class="hljs-comment"># level:1</span><br>            <span class="hljs-comment"># if just one was affected we check</span><br>            <span class="hljs-comment"># if it is affecting someone else</span><br>            <span class="hljs-keyword">elif</span> affected_vectors == <span class="hljs-number">1</span>:<br>                affected_deeper = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(affected_vector_index + <span class="hljs-number">1</span>, BB.dimensions()[<span class="hljs-number">0</span>]):<br>                    <span class="hljs-comment"># if it is affecting even one vector</span><br>                    <span class="hljs-comment"># we give up on this one</span><br>                    <span class="hljs-keyword">if</span> BB[kk, affected_vector_index] != <span class="hljs-number">0</span>:<br>                        affected_deeper = <span class="hljs-literal">False</span><br>                <span class="hljs-comment"># remove both it if no other vector was affected and</span><br>                <span class="hljs-comment"># this helpful vector is not helpful enough</span><br>                <span class="hljs-comment"># compared to our unhelpful one</span><br>                <span class="hljs-keyword">if</span> affected_deeper <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="hljs-built_in">abs</span>(bound - BB[ii, ii]):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;* removing unhelpful vectors&quot;</span>, ii, <span class="hljs-string">&quot;and&quot;</span>, affected_vector_index)<br>                    BB = BB.delete_columns([affected_vector_index, ii])<br>                    BB = BB.delete_rows([affected_vector_index, ii])<br>                    monomials.pop(affected_vector_index)<br>                    monomials.pop(ii)<br>                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">return</span> BB<br>    <span class="hljs-comment"># nothing happened</span><br>    <span class="hljs-keyword">return</span> BB<br><br><span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">Returns:</span><br><span class="hljs-string">* 0,0   if it fails</span><br><span class="hljs-string">* -1,-1 if `strict=true`, and determinant doesn&#x27;t bound</span><br><span class="hljs-string">* x0,y0 the solutions of `pol`</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boneh_durfee</span>(<span class="hljs-params">pol, modulus, mm, tt, XX, YY</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Boneh and Durfee revisited by Herrmann and May</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    finds a solution if:</span><br><span class="hljs-string">    * d &lt; N^delta</span><br><span class="hljs-string">    * |x| &lt; e^delta</span><br><span class="hljs-string">    * |y| &lt; e^0.5</span><br><span class="hljs-string">    whenever delta &lt; 1 - sqrt(2)/2 ~ 0.292</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># substitution (Herrman and May)</span><br>    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)<br>    Q = PR.quotient(x*y + <span class="hljs-number">1</span> - u) <span class="hljs-comment"># u = xy + 1</span><br>    polZ = Q(pol).lift()<br><br>    UU = XX*YY + <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># x-shifts</span><br>    gg = []<br>    <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mm - kk + <span class="hljs-number">1</span>):<br>            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk<br>            gg.append(xshift)<br>    gg.sort()<br><br>    <span class="hljs-comment"># x-shifts list of monomials</span><br>    monomials = []<br>    <span class="hljs-keyword">for</span> polynomial <span class="hljs-keyword">in</span> gg:<br>        <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> polynomial.monomials():<br>            <span class="hljs-keyword">if</span> monomial <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> monomials:<br>                monomials.append(monomial)<br>    monomials.sort()<br>    <br>    <span class="hljs-comment"># y-shifts (selected by Herrman and May)</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)<br>            yshift = Q(yshift).lift()<br>            gg.append(yshift) <span class="hljs-comment"># substitution</span><br>    <br>    <span class="hljs-comment"># y-shifts list of monomials</span><br>    <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, tt + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> kk <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(floor(mm/tt) * jj, mm + <span class="hljs-number">1</span>):<br>            monomials.append(u^kk * y^jj)<br><br>    <span class="hljs-comment"># construct lattice B</span><br>    nn = <span class="hljs-built_in">len</span>(monomials)<br>    BB = Matrix(ZZ, nn)<br>    <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>        BB[ii, <span class="hljs-number">0</span>] = gg[ii](<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, ii + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> monomials[jj] <span class="hljs-keyword">in</span> gg[ii].monomials():<br>                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)<br><br>    <span class="hljs-comment"># Prototype to reduce the lattice</span><br>    <span class="hljs-keyword">if</span> helpful_only:<br>        <span class="hljs-comment"># automatically remove</span><br>        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># reset dimension</span><br>        nn = BB.dimensions()[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> nn == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;failure&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># check if vectors are helpful</span><br>    <span class="hljs-keyword">if</span> debug:<br>        helpful_vectors(BB, modulus^mm)<br>    <br>    <span class="hljs-comment"># check if determinant is correctly bounded</span><br>    det = BB.det()<br>    bound = modulus^(mm*nn)<br>    <span class="hljs-keyword">if</span> det &gt;= bound:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Try with highers m and t.&quot;</span>)<br>        <span class="hljs-keyword">if</span> debug:<br>            diff = (log(det) - log(bound)) / log(<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))<br>        <span class="hljs-keyword">if</span> strict:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)<br><br>    <span class="hljs-comment"># display the lattice basis</span><br>    <span class="hljs-keyword">if</span> debug:<br>        matrix_overview(BB, modulus^mm)<br><br>    <span class="hljs-comment"># LLL</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)<br><br>    BB = BB.LLL()<br><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;LLL is done!&quot;</span>)<br><br>    <span class="hljs-comment"># transform vector i &amp; j -&gt; polynomials 1 &amp; 2</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;looking for independent vectors in the lattice&quot;</span>)<br>    found_polynomials = <span class="hljs-literal">False</span><br>    <br>    <span class="hljs-keyword">for</span> pol1_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn - <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> pol2_idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pol1_idx + <span class="hljs-number">1</span>, nn):<br>            <span class="hljs-comment"># for i and j, create the two polynomials</span><br>            PR.&lt;w,z&gt; = PolynomialRing(ZZ)<br>            pol1 = pol2 = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> jj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nn):<br>                pol1 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)<br>                pol2 += monomials[jj](w*z+<span class="hljs-number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)<br><br>            <span class="hljs-comment"># resultant</span><br>            PR.&lt;q&gt; = PolynomialRing(ZZ)<br>            rr = pol1.resultant(pol2)<br><br>            <span class="hljs-comment"># are these good polynomials?</span><br>            <span class="hljs-keyword">if</span> rr.is_zero() <span class="hljs-keyword">or</span> rr.monomials() == [<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="hljs-string">&quot;and&quot;</span>, pol2_idx)<br>                found_polynomials = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> found_polynomials:<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> found_polynomials:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <br>    rr = rr(q, q)<br><br>    <span class="hljs-comment"># solutions</span><br>    soly = rr.roots()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(soly) == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your prediction (delta) is too small&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>    soly = soly[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    ss = pol1(q, soly)<br>    solx = ss.roots()[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-keyword">return</span> solx, soly<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">example</span>():<br>    <span class="hljs-comment">############################################</span><br>    <span class="hljs-comment"># How To Use This Script</span><br>    <span class="hljs-comment">##########################################</span><br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># The problem to solve (edit the following values)</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># the modulus</span><br>    N = <span class="hljs-number">10037257627154486608196774801095855162090578704439233219876490744017222686494761706171113312036056644757212254824459536550416291797454693336043852190135363</span>    <span class="hljs-comment"># the public exponent</span><br>    e = <span class="hljs-number">6701513605196718137208327145211106525052740242222174201768345944717813148931274437740087428165253744741547590314279846187850432858954606153257994418035341</span><br>    <span class="hljs-comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span><br>    delta = <span class="hljs-number">.26</span> <span class="hljs-comment"># this means that d &lt; N^delta</span><br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Lattice (tweak those values)</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># you should tweak this (after a first run), (e.g. increment it until a solution is found)</span><br>    m = <span class="hljs-number">4</span> <span class="hljs-comment"># size of the lattice (bigger the better/slower)</span><br><br>    <span class="hljs-comment"># you need to be a lattice master to tweak these</span><br>    t = <span class="hljs-built_in">int</span>((<span class="hljs-number">1</span>-<span class="hljs-number">2</span>*delta) * m)  <span class="hljs-comment"># optimization from Herrmann and May</span><br>    X = <span class="hljs-number">2</span>*floor(N^delta)  <span class="hljs-comment"># this _might_ be too much</span><br>    Y = floor(N^(<span class="hljs-number">1</span>/<span class="hljs-number">2</span>))    <span class="hljs-comment"># correct if p, q are ~ same size</span><br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Don&#x27;t touch anything below</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># Problem put in equation</span><br>    P.&lt;x,y&gt; = PolynomialRing(ZZ)<br>    A = <span class="hljs-built_in">int</span>((N+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)<br>    pol = <span class="hljs-number">1</span> + x * (A + y)<br><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># Find the solutions!</span><br>    <span class="hljs-comment">#</span><br><br>    <span class="hljs-comment"># Checking bounds</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== checking values ===&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;* delta:&quot;</span>, delta)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;* delta &lt; 0.292&quot;</span>, delta &lt; <span class="hljs-number">0.292</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;* size of e:&quot;</span>, <span class="hljs-built_in">int</span>(log(e)/log(<span class="hljs-number">2</span>)))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;* size of N:&quot;</span>, <span class="hljs-built_in">int</span>(log(N)/log(<span class="hljs-number">2</span>)))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;* m:&quot;</span>, m, <span class="hljs-string">&quot;, t:&quot;</span>, t)<br><br>    <span class="hljs-comment"># boneh_durfee</span><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== running algorithm ===&quot;</span>)<br>        start_time = time.time()<br><br>    solx, soly = boneh_durfee(pol, e, m, t, X, Y)<br><br>    <span class="hljs-comment"># found a solution?</span><br>    <span class="hljs-keyword">if</span> solx &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== solution found ===&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-literal">False</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x:&quot;</span>, solx)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;y:&quot;</span>, soly)<br><br>        d = <span class="hljs-built_in">int</span>(pol(solx, soly) / e)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;private key found:&quot;</span>, d)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=== no solution was found ===&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> debug:<br>        <span class="hljs-built_in">print</span>((<span class="hljs-string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time)))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    example()<br></code></pre></td></tr></table></figure><p>这里需要改数，delta改成.26</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># the modulus</span><br>N = <span class="hljs-number">10037257627154486608196774801095855162090578704439233219876490744017222686494761706171113312036056644757212254824459536550416291797454693336043852190135363</span>    <span class="hljs-comment"># the public exponent</span><br>e = <span class="hljs-number">6701513605196718137208327145211106525052740242222174201768345944717813148931274437740087428165253744741547590314279846187850432858954606153257994418035341</span><br><span class="hljs-comment"># the hypothesis on the private exponent (the theoretical maximum is 0.292)</span><br>delta = <span class="hljs-number">.26</span> <span class="hljs-comment"># this means that d &lt; N^delta</span><br></code></pre></td></tr></table></figure><p>用代码跑出来d是N的0.253906次方，取整0.26</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义N的值</span><br>N = <span class="hljs-number">10037257627154486608196774801095855162090578704439233219876490744017222686494761706171113312036056644757212254824459536550416291797454693336043852190135363</span><br><br><span class="hljs-comment"># 计算N的位数（以2为底的对数取整加1）</span><br>bits_N = N.bit_length()<br><br><span class="hljs-comment"># 已知d的位数</span><br>bits_d = <span class="hljs-number">130</span><br><br><span class="hljs-comment"># 计算delta</span><br>delta = bits_d / bits_N<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;N的位数: <span class="hljs-subst">&#123;bits_N&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;d的位数: <span class="hljs-subst">&#123;bits_d&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;计算得到的delta值: <span class="hljs-subst">&#123;delta:<span class="hljs-number">.6</span>f&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749696876596-c7bc4266-58bc-4f81-8fce-746bdde52b18.png"></p><p>可以跑出d，然后rsa</p><h2 id="3、告白2009-01-23-轩辕杯"><a href="#3、告白2009-01-23-轩辕杯" class="headerlink" title="3、告白2009-01-23(轩辕杯)"></a>3、告白2009-01-23(轩辕杯)</h2><p>这题贼逆天，搞出来维纳之后就不会了，看看wp，尝试打开脑洞</p><p>题目</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749697136071-966ebe55-1f04-4691-9475-92cf7e2eb27a.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749697135968-317c4645-0844-421e-bf57-c1ec95bbb5f7.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Guten Morgen zusammen, die Klartext dieser Aufgabe kann nicht direkt in Bytes umgewandelt werden, es ist Zeit, eure Erfahrungen zu überprüfen.</span><br><span class="hljs-string">Außer Morse habe ich alles verwendet.</span><br><span class="hljs-string">Der ursprüngliche Geheimtext war 23 Zeichen lang, ich habe heimlich einige gelöscht.（3，22）</span><br><span class="hljs-string">Die gewonnene Klartext muss mit flag&#123;&#125; zur Einreichung verpackt werden.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> random<br><br>m = *********************<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    nbits = <span class="hljs-number">1024</span><br>    d = random.getrandbits(nbits // <span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">if</span> (libnum.gcd(d, phi_n) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">36</span> * <span class="hljs-built_in">pow</span>(d, <span class="hljs-number">4</span>) &lt; n):<br>        <span class="hljs-keyword">break</span><br><br>e = libnum.invmod(d, phi_n)<br><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e=&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>, c)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n= 124762621470034613107197344874895463101677058655448660860937776290035263249711758102356057571842810925215203428868464150186461003105471933476083831734777635446418443096995551213072544784357055024023288978153531414423493467522954813474136866576485009388617875406815342233250648837174117653758627109986543346333</span><br><span class="hljs-string">e= 37248847537957409232651401129305114512470497694506605266900979813984231282922350650248039658555592518606969114518570328718964559611068021916386771479480822730045804941012198725270040833058249009739175909002676763822813201249740052448464482472670487265635732950161013180506343487040425655784616203407291206415</span><br><span class="hljs-string">c= 22674642096138798399502909931873599414724642786278300072307880329495143401852100396465511646547771709451922710635499098906074123739801074405066108915211399754252758775405149276707371634017771376634383558640755377947056996970648911918031827499354108377969346446053076888905762276653291273750407317542371228050</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>观察题目容易发现是维纳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continuedFra</span>(<span class="hljs-params">x, y</span>):<br>    cf = []<br>    <span class="hljs-keyword">while</span> y:<br>        cf.append(x // y)<br>        x, y = y, x % y<br>    <span class="hljs-keyword">return</span> cf<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gradualFra</span>(<span class="hljs-params">cf</span>):<br>    numerator = <span class="hljs-number">0</span><br>    denominator = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cf[::-<span class="hljs-number">1</span>]:<br>        numerator, denominator = denominator, x * denominator + numerator<br>    <span class="hljs-keyword">return</span> numerator, denominator<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_pq</span>(<span class="hljs-params">a, b, c</span>):<br>    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)<br>    <span class="hljs-keyword">return</span> (-b + par) // (<span class="hljs-number">2</span> * a), (-b - par) // (<span class="hljs-number">2</span> * a)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getGradualFra</span>(<span class="hljs-params">cf</span>):<br>    gf = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(cf) + <span class="hljs-number">1</span>):<br>        gf.append(gradualFra(cf[:i]))<br>    <span class="hljs-keyword">return</span> gf<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e, n</span>):<br>    cf = continuedFra(e, n)<br>    gf = getGradualFra(cf)<br>    <span class="hljs-keyword">for</span> d, k <span class="hljs-keyword">in</span> gf:<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi = (e * d - <span class="hljs-number">1</span>) // k<br>        p, q = solve_pq(<span class="hljs-number">1</span>, n - phi + <span class="hljs-number">1</span>, n)<br>        <span class="hljs-keyword">if</span> p * q == n:<br>            <span class="hljs-keyword">return</span> d, p, q  <span class="hljs-comment"># 修改此处，同时返回d、p、q</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>  <span class="hljs-comment"># 修改此处，返回三个None</span><br><br><br>n = <span class="hljs-number">124762621470034613107197344874895463101677058655448660860937776290035263249711758102356057571842810925215203428868464150186461003105471933476083831734777635446418443096995551213072544784357055024023288978153531414423493467522954813474136866576485009388617875406815342233250648837174117653758627109986543346333</span><br>e = <span class="hljs-number">37248847537957409232651401129305114512470497694506605266900979813984231282922350650248039658555592518606969114518570328718964559611068021916386771479480822730045804941012198725270040833058249009739175909002676763822813201249740052448464482472670487265635732950161013180506343487040425655784616203407291206415</span><br>c = <span class="hljs-number">22674642096138798399502909931873599414724642786278300072307880329495143401852100396465511646547771709451922710635499098906074123739801074405066108915211399754252758775405149276707371634017771376634383558640755377947056996970648911918031827499354108377969346446053076888905762276653291273750407317542371228050</span><br><br>d, p, q = wienerAttack(e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;d = <span class="hljs-subst">&#123;d&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;q = <span class="hljs-subst">&#123;q&#125;</span>&quot;</span>)<br><span class="hljs-keyword">if</span> d <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;维纳攻击失败，未能找到有效的d&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到私钥d: <span class="hljs-subst">&#123;d&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到p: <span class="hljs-subst">&#123;-p&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到q: <span class="hljs-subst">&#123;-q&#125;</span>&quot;</span>)<br>    m = <span class="hljs-built_in">pow</span>(c, d, n)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 尝试UTF-8解码</span><br>        flag = libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Flag: <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>        <span class="hljs-comment"># 如果UTF-8解码失败，直接输出16进制</span><br>        hex_str = libnum.n2s(<span class="hljs-built_in">int</span>(m)).<span class="hljs-built_in">hex</span>()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密结果(16进制): <span class="hljs-subst">&#123;hex_str&#125;</span>&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;这可能是因为:&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1. 明文不是文本数据&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;2. 找到的d不正确&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;3. 需要其他解码方式&quot;</span>)<br><br><span class="hljs-comment">#找到私钥d: 36472726395671225670093171248325918186789998032149601506082280479733670354543</span><br><span class="hljs-comment"># 找到p: 10019385701055492418722397394835551507055291902434030666159124310569748311465887511195909526639776443413395966480528523801375385526012767425531420021271409</span><br><span class="hljs-comment">#找到q: 12452122833926983353778601385109747808997219941492843225833576691608546364155355849689247295297048403140627536157590574231651550766349668377847352850553837</span><br></code></pre></td></tr></table></figure><p>不知道为什么我这里解出来是负值，但是又满足rsa条件</p><p>m&#x3D;4392327343633272436332</p><p><a href="https://www.cnblogs.com/analyzer/archive/2009/02/09/1386773.html">摩斯电码里的爱情 - analyzer - 博客园</a></p><p>手机九键得到 oisttseeowoi，键盘替换得到 ihleelccibih，</p><p>结合德语内容：14根篱笆。我自发地投了9票和12票。第六道篱笆的形状像字母D，当我用力踢他时，他变成了一个L</p><p>l 改成 d 得到 ihleedccibih，踢掉的两个变成空格得到 ihleedcc ib ih，栅栏 2 栏得到 ich liebe dich</p><p>德语“我爱你”：ich liebe dich</p><h2 id="4、古典密码（轩辕杯）"><a href="#4、古典密码（轩辕杯）" class="headerlink" title="4、古典密码（轩辕杯）"></a>4、古典密码（轩辕杯）</h2><p>题目</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749697178222-07a209b2-b0de-44ca-936c-f81689aa4402.png"></p><p>大佬就是大佬，输的心服口服，采集只会一把梭6666</p><p>前面四个步骤没搞懂是怎么到ogrp{jqvyJTogrpJTyvoogrp}的，等wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><br><span class="hljs-comment"># 定义映射表: 明文字母 -&gt; 密文字母</span><br>cipher_key = <span class="hljs-string">&quot;qwertyuiopasdfghjklzxcvbnm&quot;</span><br>plain_lower = string.ascii_lowercase<br>plain_upper = string.ascii_uppercase<br><br><span class="hljs-comment"># 构建解密映射: 密文字母 -&gt; 明文字母</span><br>decrypt_map = &#123;&#125;<br><span class="hljs-keyword">for</span> p, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(plain_lower, cipher_key):<br>    decrypt_map[c] = p<br><span class="hljs-keyword">for</span> p, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(plain_upper, cipher_key.upper()):<br>    decrypt_map[c] = p<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">monoalpha_decrypt</span>(<span class="hljs-params">text: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;单表替换解密&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(decrypt_map.get(ch, ch) <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> text)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">caesar_decrypt</span>(<span class="hljs-params">text: <span class="hljs-built_in">str</span>, shift: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;凯撒解密&quot;&quot;&quot;</span><br>    result = []<br>    <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> text:<br>        <span class="hljs-keyword">if</span> ch.islower():<br>            result.append(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)))<br>        <span class="hljs-keyword">elif</span> ch.isupper():<br>            result.append(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(ch) - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>) - shift) % <span class="hljs-number">26</span> + <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>)))<br>        <span class="hljs-keyword">else</span>:<br>            result.append(ch)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(result)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    ciphertext = <span class="hljs-string">&#x27;ogrp&#123;jqvyJTogrpJTyvoogrp&#125;&#x27;</span><br>    first_decrypt = monoalpha_decrypt(ciphertext)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Step 1 - Monoalphabetic Decrypt: <span class="hljs-subst">&#123;first_decrypt&#125;</span>&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Step 2 - Caesar Decrypts (all 26 shifts):&quot;</span>)<br>    <span class="hljs-keyword">for</span> shift <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>        caesar = caesar_decrypt(first_decrypt, shift)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Shift <span class="hljs-subst">&#123;shift:2d&#125;</span>: <span class="hljs-subst">&#123;caesar&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="1、哇哇哇瓦（轩辕杯）"><a href="#1、哇哇哇瓦（轩辕杯）" class="headerlink" title="1、哇哇哇瓦（轩辕杯）"></a>1、哇哇哇瓦（轩辕杯）</h2><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749697208377-76874db8-f545-44a7-8655-6ed1c1749d87.png"></p><p>rgb只有一半flag,图片转压缩包有一个隐藏文件打开有提示</p><p>“密码是场上存活的两位英雄的英文名字连起来(区分大小写)什么?你不知道密码在哪用?!那我问你，隐写都知道，明写看不见?拿你瞄准时的眼力仔细观察观察图片中的角落吧”这里就是说密码是GekkoYoru</p><p>打开虚拟机</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749697208320-3a5a1ca1-4e3c-499e-81b6-5a60c0ab19b8.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">zsteg -E &quot;b8,rgb,lsb,XY&quot; &#x27;/home/yanni/Desktop/瓦学弟天天开心.png&#x27; &gt;3.zip<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749697208452-3eec9f79-4146-4220-8d30-4885a702a8ae.png"></p><p>会扫出来一个压缩包，结合上面密码得到后半部分flag</p><h2 id="2、隐藏的邀请（轩辕杯）"><a href="#2、隐藏的邀请（轩辕杯）" class="headerlink" title="2、隐藏的邀请（轩辕杯）"></a>2、隐藏的邀请（轩辕杯）</h2><p>docx 改 zip 格式，解压发现一个可疑文件Cyyyy，果然在里面发现隐藏的两段一样的十六进制</p><p>学到了</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749697288745-4ca5af0b-d3a4-4870-af77-05db77d59f70.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2025/jpeg/55555431/1749697288665-04bd1b02-88eb-47f9-97e8-53a7ad20db60.jpeg"></p><p>网站<a href="https://online-barcode-reader.inliteresearch.com/">online-barcode-reader.inliteresearch.com</a></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749697288815-adcfd3da-386e-4ff4-84d1-3d7d21ccda21.png"></p><h2 id="3、音频的秘密（轩辕杯）"><a href="#3、音频的秘密（轩辕杯）" class="headerlink" title="3、音频的秘密（轩辕杯）"></a>3、音频的秘密（轩辕杯）</h2><h3 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h3><p>第一次做音频隐写，学到一个工具silenteye</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/55555431/1749697322722-fe286bd5-0581-4f6c-b0ea-44251551b262.png"></p><p>压缩包注释Lovely，爆一下密码是1234，拿到图片丢随波逐流，然后维吉尼亚拿到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>newpage</title>
    <link href="/2025/06/08/newpage/"/>
    <url>/2025/06/08/newpage/</url>
    
    <content type="html"><![CDATA[<p>官方体育与i</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/06/06/hello-world/"/>
    <url>/2025/06/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
